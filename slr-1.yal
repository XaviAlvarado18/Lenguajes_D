(* Lexer para Gramática No. 1 - Expresiones aritméticas simples para variables *)

(* Introducir cualquier header aqui *)

let delim = [' ''\t''\n']
let ws = delim+
let letter = ['A'-'Z''a'-'z']
let digit = ['0'-'9']
let id  = letter(letter|digit)*


rule tkens = 
    ws		  { return WHITESPACE }
  | id        { 
    with open('./tokens/tokens.txt', 'a') as archivo:
      archivo.write("\nID")
  }        
  | '+'       { 
    print("hola")
  }
  | '*'       { 
    import turtle;
    t=turtle.Turtle();
    [t.forward(100), t.backward(100), t.right(45), t.forward(100), t.backward(100), t.left(90), t.forward(100), t.backward(100), t.right(45), t.forward(100), t.backward(100), t.rt(180), t.forward(100), t.backward(100), t.right(45), t.forward(100), t.backward(100), t.left(90), t.forward(100), t.backward(100), t.right(45), t.forward(100), t.backward(100)]*8;
    t.hideturtle();
    turtle.done();
  }
  | '('       { 
    with open('./tokens/tokens.txt', 'a') as archivo:
      archivo.write("\n(")
  }
  | ')'       { 
    with open('./tokens/tokens.txt', 'a') as archivo:
      archivo.write("\n)")
  }       

(* Introducir cualquier trailer aqui *)