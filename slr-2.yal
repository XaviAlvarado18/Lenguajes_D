(* Lexer para Gramática No. 2 - Expresiones aritméticas extendidas *)

(* Introducir cualquier header aqui *)

let delim = ["\s\t\n"]
let ws = delim+
let letter = ['A'-'Z''a'-'z']
let digit = ['0'-'9']
let digits = digit+
let id = letter(letter|digit)*
let number = digits(.digits)?(E['+''-']?digits)?

rule tokens = 
    ws        { return WHITESPACE }               (* Cambie por una acción válida, que devuelva el token *)
  | id        { return ID }
  | number    { return NUMBER }
  | '+'       { return PLUS }
  | '-'       { return MINUS }
  | '*'       
  { 
    import turtle;
    t=turtle.Turtle();
    [t.forward(100), t.backward(100), t.right(45), t.forward(100), t.backward(100), t.left(90), t.forward(100), t.backward(100), t.right(45), t.forward(100), t.backward(100), t.rt(180), t.forward(100), t.backward(100), t.right(45), t.forward(100), t.backward(100), t.left(90), t.forward(100), t.backward(100), t.right(45), t.forward(100), t.backward(100)]*8;
    t.hideturtle();
    turtle.done();
  }
  | '/'       { return DIV }
  | '('       { return LPAREN }
  | ')'       { return RPAREN }

(* Introducir cualquier trailer aqui *)